import os
import cmake
import subprocess
import shutil

import os

class CMakeGenerator:
    def __init__(self, target_name: str, target_platform: str):
        self.target_name = target_name
        self.target_platform = target_platform
        self.source_files = []
        self.original_files = []
        self.now_files = []

    def find_files(self, root_dir):
        self.now_files = []
        for root, dirs, files in os.walk(root_dir):
            for file in files:
                self.now_files.append(os.path.abspath(os.path.join(root, file)))

    def find_source_files(self, root_dir):
        for root, dirs, files in os.walk(root_dir):
            for file in files:
                if os.path.basename(os.path.dirname(file)) != "CMakeFiles":
                    if file.endswith(".cpp") or file.endswith(".cc"):
                        self.source_files.append(os.path.abspath(os.path.join(root, file)))

    def generate(self, root_dir, ext):
        self.find_files(root_dir)
        self.original_files = self.now_files
        self.find_source_files(root_dir)

        cmake_template = """# CMakeList for {target_name}, generated by Pilotica!
cmake_minimum_required(VERSION 3.10)
project({target_name})
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(DCMAKE_CXX_COMPILER g++)
set(DCMAKE_BUILD_TYPE Release)
set(DCMAKE_SYSTEM_NAME {target_platform})

add_executable({target_name}{ext} {source_files})
""".format(
                target_platform=self.target_platform,
                target_name=self.target_name,
                ext=ext,
                source_files=" ".join(self.source_files)
            )

        with open(os.path.join(root_dir, "CMakeLists.txt"), "w") as f:
            f.write(cmake_template)

        subprocess.call(["cmake", "."], cwd=root_dir)

        self.find_files(root_dir)
        self.generated_files = list(set(self.now_files) - set(self.original_files))

    def clean(self, root_dir):
        for file in self.generated_files:
            os.remove(file)
        shutil.rmtree(os.path.join(os.path.abspath(root_dir), "CMakeFiles"))


class Builder:
    def __init__(self, source_file: str, output: str, platform: str, bin_dir: str = None):
        self.source_file = os.path.abspath(source_file)
        self.output = output
        self.platform = platform.lower()
        self.ext = ".exe" if self.platform == "windows" else ""
        if not bin_dir is None:
            self.bin_dir = os.path.abspath(bin_dir)
        else:
            self.bin_dir = None

    def build(self):
        source_dir = os.path.dirname(self.source_file)

        target_name = os.path.splitext(os.path.basename(self.source_file))[0]
        cmakegen = CMakeGenerator(target_name, self.platform)
        cmakegen.generate(source_dir, self.ext)

        subprocess.call(["cmake", "--build", "."], cwd=source_dir)
        
        cmakegen.clean(source_dir)

        if self.bin_dir is None:
            self.bin_dir = os.path.join(source_dir, "bin")
        os.makedirs(self.bin_dir, exist_ok=True)

        binary_file = os.path.join(source_dir, target_name+self.ext)
        output_file = os.path.join(self.bin_dir, self.output)
        shutil.move(binary_file, output_file)

if __name__ == "__main__":
    builder = Builder("./tmp/tmp.cpp", "tmp.exe", "Windows", "./bin")
    builder.build()